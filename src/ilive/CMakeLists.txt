cmake_minimum_required(VERSION 2.8.3)
project(ilive)

set(CMAKE_BUILD_TYPE "RelWithDebInfo")
set(CMAKE_CXX_FLAGS " ${CMAKE_CXX_FLAGS}  -std=c++14 -lboost_system -Wenum-compare -Wattributes -lpthread  -Wl,--as-needed") # -Wall
# set(CMAKE_BUILD_TYPE "Release")
# set(CMAKE_CXX_FLAGS " ${CMAKE_CXX_FLAGS}  -std=c++14 -O3 -lboost_system -msse2 -msse3 -pthread -Wenum-compare -Wattributes ") # -Wall
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

add_definitions(-DROOT_DIR=\"${CMAKE_CURRENT_SOURCE_DIR}/\")


FIND_PACKAGE(Boost REQUIRED COMPONENTS filesystem iostreams program_options system serialization)
if(Boost_FOUND)
	INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS})
	LINK_DIRECTORIES(${Boost_LIBRARY_DIRS})
endif()

find_package(catkin REQUIRED COMPONENTS
                    roscpp
                    std_msgs
                    geometry_msgs
                    nav_msgs
                    tf
                    cv_bridge
                    livox_ros_driver
            )
# find_package(Ceres REQUIRED)
find_package(PCL REQUIRED)
find_package(OpenCV REQUIRED)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS}   ${OpenMP_C_FLAGS}")

### Find OpenMP #######
FIND_PACKAGE(OpenMP)
if(OPENMP_FOUND)
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
	#cmake only check for separate OpenMP library on AppleClang 7+
	#https://github.com/Kitware/CMake/blob/42212f7539040139ecec092547b7d58ef12a4d72/Modules/FindOpenMP.cmake#L252
	if (CMAKE_CXX_COMPILER_ID MATCHES "AppleClang" AND (NOT CMAKE_CXX_COMPILER_VERSION VERSION_LESS "7.0"))
		SET(OpenMP_LIBS ${OpenMP_libomp_LIBRARY})
		LIST(APPEND OpenMVS_EXTRA_LIBS ${OpenMP_LIBS})
	endif()
else()
	message("-- Can't find OpenMP. Continuing without it.")
endif()

# message(WARNING "OpenCV_VERSION: ${OpenCV_VERSION}")

include_directories(${catkin_INCLUDE_DIRS})

generate_messages(
 DEPENDENCIES
 geometry_msgs
)

set(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)
find_package(Eigen3)
include_directories(
  ${catkin_INCLUDE_DIRS}
  ${EIGEN3_INCLUDE_DIR}
  ${PCL_INCLUDE_DIRS}
  ${livox_ros_driver_INCLUDE_DIRS}
  ./src
  ./src/Basis/loam/include
  ./src/Basis/tools/
  ./src/Basis/rgb_map 
  ./src/Basis/consistent_solution
)


catkin_package()

add_executable(ilive_LiDAR_front_end src/Basis/loam/LiDAR_front_end.cpp src/StateParameter.h)
target_link_libraries(ilive_LiDAR_front_end ${catkin_LIBRARIES} ${PCL_LIBRARIES})


add_executable(ilive_mapping 
                src/ilive.cpp 
                src/lio/lio_thread.cpp
                src/lio/lio_process.cpp
                src/lio/lio_update.cpp
                src/Basis/loam/include/kd_tree/ikd_Tree.cpp
                src/Basis/loam/include/FOV_Checker/FOV_Checker.cpp 
                src/Basis/loam/IMU_Processing.cpp
                src/Basis/rgb_map/offline_map_recorder.cpp
                # From VIO
                src/vio/vio_update.cpp
                src/vio/vio_thread.cpp
                src/vio/vio_process.cpp
                src/Basis/optical_flow/lkpyramid.cpp
                src/Basis/rgb_map/rgbmap_tracker.cpp
                src/Basis/rgb_map/image_frame.cpp
                src/Basis/rgb_map/pointcloud_rgbd.cpp
        src/StateParameter.h
        src/Basis/consistent_solution/cPnP.cpp
        )
target_link_libraries(ilive_mapping PUBLIC
                          ${catkin_LIBRARIES}
                          ${Boost_LIBRARIES}
                          ${Boost_FILESYSTEM_LIBRARY}
                          ${Boost_SERIALIZATION_LIBRARY} # serialization
                          ${OpenCV_LIBRARIES}
                          ${PCL_LIBRARIES}
                          pcl_common 
                          pcl_io) 
